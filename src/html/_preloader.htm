<!-- Документація: https://template.fls.guru/template-docs/modul-preloader.html -->
<div id="fls-preloader">
    <!-- Скріпт прелоадера -->
    <script>
        function preloader() {
            const preloaderImages = document.querySelector("[data-preloader]")
                ? document.querySelectorAll("[data-preloader] img")
                : document.querySelectorAll("img");
            const preloaderContainer = document.querySelector("#fls-preloader");
            if (preloaderImages.length) {
                const preloaderStyleTemplate = `
				<style>
					* {
						padding: 0px;
						margin: 0px;
						border: 0px;
						box-sizing: border-box;
					}
					/* Головний блок */
					.fls-preloader{
						pointer-events: none;
						z-index: 1000;
						position: fixed;
						width: 100%;
						height: 100%;
						top: 0;
						left: 0;
						display: flex;
						justify-content:center;
						align-items: center;
						background-color: #0f1621;
					}
					.fls-preloader img {
						max-width: 256px;
					}
				</style>`;

                document.head.insertAdjacentHTML("beforeend", preloaderStyleTemplate);

                const preloaderTemplate = `
					<div class="fls-preloader">
						<img width="256" height="38" src="@img/logo.svg" alt="coins">
					</div>`;
                document.body.insertAdjacentHTML("beforeend", preloaderTemplate);

                const preloader = document.querySelector(".fls-preloader"),
                    showPecentLoad = document.querySelector(".fls-preloader__counter"),
                    showLineLoad = document.querySelector(".fls-preloader__line span"),
                    htmlDocument = document.documentElement;

                let imagesLoadedCount = (counter = progress = 0);

                htmlDocument.classList.add("loading");
                htmlDocument.classList.add("lock");

                preloaderImages.forEach((preloaderImage) => {
                    const imgClone = document.createElement("img");
                    if (imgClone) {
                        imgClone.onload = imageLoaded;
                        imgClone.onerror = imageLoaded;
                        preloaderImage.dataset.src
                            ? (imgClone.src = preloaderImage.dataset.src)
                            : (imgClone.src = preloaderImage.src);
                    }
                });
                function setValueProgress(progress) {
                    showPecentLoad ? (showPecentLoad.innerText = `${progress}%`) : null;
                    showLineLoad ? (showLineLoad.style.width = `${progress}%`) : null;
                }
                showPecentLoad ? setValueProgress(progress) : null;

                function imageLoaded() {
                    imagesLoadedCount++;
                    progress = Math.round((100 / preloaderImages.length) * imagesLoadedCount);
                    const intervalId = setInterval(() => {
                        counter >= progress
                            ? clearInterval(intervalId)
                            : setValueProgress(++counter);
                        counter >= 100 ? addLoadedClass() : null;
                    }, 10);
                }
                function addLoadedClass() {
                    htmlDocument.classList.add("loaded");
                    htmlDocument.classList.remove("lock");
                    htmlDocument.classList.remove("loading");
                    setInterval(() => {
                        preloader.remove();
                        preloaderContainer.remove();
                    }, 500);
                }
            } else {
                preloaderContainer.remove();
            }
        }
        preloader();
    </script>
</div>
